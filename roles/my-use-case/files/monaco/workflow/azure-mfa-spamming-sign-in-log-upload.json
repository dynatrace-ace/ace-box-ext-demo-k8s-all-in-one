{
  "id": "a5b1625a-0a86-4848-9bc3-a05bd7eb2c57",
  "title": "{{.name}}",
  "tasks": {
    "upload_logs": {
      "name": "upload_logs",
      "action": "dynatrace.automations:run-javascript",
      "description": "Build a custom task running js Code",
      "input": {
        "script": "// optional import of sdk modules\nimport { execution } from '@dynatrace-sdk/automation-utils';\nimport { credentialVaultClient } from \"@dynatrace-sdk/client-classic-environment-v2\";\n\nexport default async function ({ execution_id }) {\n\n  const ex = await execution(execution_id);\n  const env_url = await ex.result('get_environment_url');\n  \n  // Constants section\n  const log_forwarding_access_token_credential_name = \"log-forwarding-access-token\";\n  const logIngestionEndpoint = `${env_url}api/v2/logs/ingest`;\n\n let dynatraceAccessToken = null;\n\n  const users = [\n      \"Bruce Wayne\", \"Alice Rossi\", \"John Doe\", \"Maria Lopez\", \"Tom Smith\", \n      \"Sara Johnson\", \"Liam Brown\", \"Emma Garcia\", \"Noah Martinez\", \"Sophia Wilson\",\n      \"James Anderson\", \"Olivia Thomas\", \"Benjamin Lee\", \"Isabella Gonzalez\", \"Lucas Harris\",\n      \"Mia Clark\", \"Mason Lewis\", \"Charlotte Robinson\", \"Ethan Walker\", \"Amelia Young\",\n      \"Aiden Hall\", \"Ava Allen\", \"Jacob Hernandez\", \"Harper King\", \"Michael Wright\",\n      \"Ella Scott\", \"Elijah Hill\", \"Scarlett Green\", \"Daniel Adams\", \"Abigail Baker\",\n      \"Matthew Nelson\", \"Emily Perez\", \"David Carter\", \"Victoria Mitchell\", \"Samuel Roberts\",\n      \"Grace Turner\", \"Logan Phillips\", \"Lily Campbell\", \"Henry Parker\", \"Zoe Evans\",\n      \"Alexander Edwards\", \"Chloe Collins\", \"Jackson Stewart\", \"Layla Morris\", \"Sebastian Rivera\",\n      \"Riley Ward\", \"Nathan Morgan\", \"Eleanor Reed\", \"Caleb Peterson\", \"Hannah Howard\",\n      \"Jack Bell\", \"Lillian Kelly\", \"Joshua Hughes\", \"Addison Butler\", \"Andrew Ramirez\",\n      \"Stella Torres\", \"Ryan Foster\", \"Lucy Flores\", \"Gabriel Simmons\", \"Aubrey Powell\",\n      \"Carter Lee\", \"Penelope Price\", \"Jayden Brooks\", \"Evelyn Jenkins\", \"Owen Sanders\",\n      \"Madison Long\", \"Julian Hughes\", \"Mila Ross\", \"Leo Cook\", \"Hazel Watson\",\n      \"Christian Bryant\", \"Nora Bennett\", \"Isaac Barnes\", \"Paisley Wood\", \"Oliver Coleman\",\n      \"Ellie Morris\", \"Thomas Rivera\", \"Arianna Kelly\", \"Aaron Rogers\", \"Kinsley Cox\",\n      \"Charles Rivera\", \"Brooklyn Diaz\", \"Nicholas Perez\", \"Claire Diaz\", \"Joseph Foster\",\n      \"Alyssa Myers\", \"Christopher Kim\", \"Savannah Bennett\", \"Daniel Cox\", \"Anna Fisher\",\n      \"Jonathan Ortiz\", \"Aurora Vasquez\", \"Robert Simmons\", \"Natalie James\", \"Brandon Jenkins\",\n      \"Ruby Lewis\", \"Nathaniel Patterson\", \"Serenity Collins\", \"Dylan Coleman\", \"Violet Perry\",\n      \"Adam Flores\", \"Samantha Simmons\", \"Jaxon Cooper\", \"Willow Rivera\", \"Jason Butler\"\n  ];\n  \n  const userEmails = users.map((user, i) => `${user.toLowerCase().replace(\" \", \".\")}@example.com`);\n  \n  const applications = [\"Azure Portal\", \"AWS Console\", \"Google Cloud Console\", \"Salesforce\", \"Office 365\", \"Slack\", \"GitHub\", \"Jira\", \"Confluence\", \"Zoom\"];\n  const clientApps = [\"Browser\", \"Mobile\", \"Desktop App\"];\n  const devices = [\n      { operatingSystem: \"Windows 10\", browser: \"Chrome 115.0.0\" },\n      { operatingSystem: \"MacOS\", browser: \"Safari 16.0\" },\n      { operatingSystem: \"Linux\", browser: \"Firefox 118.0\" },\n      { operatingSystem: \"Windows 11\", browser: \"Edge 130.0\" },\n      { operatingSystem: \"iOS\", browser: \"Safari 15.0\" },\n      { operatingSystem: \"Android\", browser: \"Chrome 110.0\" }\n  ];\n  const familiarDevice = { operatingSystem: \"Windows 10\", browser: \"Chrome 115.0.0\", deviceId: \"desktop-123\" };\n  const familiarDeviceMobile = { operatingSystem: \"iOS\", browser: \"Safari 15.0\", deviceId: \"mobile-456\" };\n  const unfamiliarDevice = { operatingSystem: \"Linux\", browser: \"Firefox 111.0\", deviceId: \"device-abc\" };\n  const unfamiliarDevice_2 = { operatingSystem: \"Solaris\", browser: \"Opera 99.0\", deviceId: \"device-fvjnwno\" };\n\n  const familiarLocation = { city: \"New York\", country: \"US\", latitude: 40.7128, longitude: -74.006 };\n  const unfamiliarLocation = { city: \"Berlin\", country: \"DE\", latitude: 52.52, longitude: 13.405 };\n\n  const locations = [\n      { city: \"Linz\", country: \"AT\", latitude: 48.303, longitude: 14.291 },\n      { city: \"New York\", country: \"US\", latitude: 40.7128, longitude: -74.006 },\n      { city: \"Milan\", country: \"IT\", latitude: 45.4642, longitude: 9.1900 },\n      { city: \"Tokyo\", country: \"JP\", latitude: 35.6895, longitude: 139.6917 },\n      { city: \"Sydney\", country: \"AU\", latitude: -33.8688, longitude: 151.2093 },\n      { city: \"London\", country: \"GB\", latitude: 51.5074, longitude: -0.1278 },\n      { city: \"Paris\", country: \"FR\", latitude: 48.8566, longitude: 2.3522 },\n      { city: \"Berlin\", country: \"DE\", latitude: 52.52, longitude: 13.405 },\n      { city: \"Toronto\", country: \"CA\", latitude: 43.65107, longitude: -79.347015 },\n      { city: \"Dubai\", country: \"AE\", latitude: 25.276987, longitude: 55.296249 },\n      { city: \"Singapore\", country: \"SG\", latitude: 1.352083, longitude: 103.819836 },\n      { city: \"SÃ£o Paulo\", country: \"BR\", latitude: -23.55052, longitude: -46.633308 },\n      { city: \"Mexico City\", country: \"MX\", latitude: 19.432608, longitude: -99.133209 },\n      { city: \"Johannesburg\", country: \"ZA\", latitude: -26.2041, longitude: 28.0473 },\n      { city: \"Moscow\", country: \"RU\", latitude: 55.7558, longitude: 37.6176 },\n      { city: \"Bangkok\", country: \"TH\", latitude: 13.7563, longitude: 100.5018 },\n      { city: \"Hong Kong\", country: \"HK\", latitude: 22.3193, longitude: 114.1694 },\n      { city: \"Los Angeles\", country: \"US\", latitude: 34.0522, longitude: -118.2437 },\n      { city: \"Chicago\", country: \"US\", latitude: 41.8781, longitude: -87.6298 },\n      { city: \"Miami\", country: \"US\", latitude: 25.7617, longitude: -80.1918 }\n  ];\n  \n  const failureReasons = [\n      { errorCode: 50126, failureReason: \"Error validating credentials due to invalid username or password.\" },\n      { errorCode: 50076, failureReason: \"MFA required but not satisfied.\" },\n      { errorCode: 53003, failureReason: \"Access blocked by conditional access policy.\" }\n  ];\n\n  const success = { errorCode: 0, failureReason: \"Success\" }; // For successful logins\n\n  // Known malicious user-agents and OS\n  const maliciousUserAgents = [\n      { userAgent: \"sqlmap/1.5.2#stable\", operatingSystem: \"Kali Linux\" },  // Used for penetration testing\n      { userAgent: \"Nmap Scripting Engine\", operatingSystem: \"Parrot OS\" }, // Known hacker OS\n      { userAgent: \"Nikto/2.1.6\", operatingSystem: \"Windows XP\" },          // Unsupported, often exploited\n      { userAgent: \"w3af.org\", operatingSystem: \"Ubuntu 14.04\" },           // Outdated Linux distro\n      { userAgent: \"DirBuster-1.0-RC1\", operatingSystem: \"Windows 7\" },     // Unsupported OS\n      { userAgent: \"Acunetix\", operatingSystem: \"Kali Linux\" },             // Used for web vulnerability scans\n      { userAgent: \"ZmEu\", operatingSystem: \"Debian 8\" },                   // Outdated Linux distro\n      { userAgent: \"OWASP ZAP\", operatingSystem: \"Windows 7\" },             // Known security tool\n      { userAgent: \"ApacheBench/2.3\", operatingSystem: \"CentOS 6\" },        // Outdated Linux distro\n      { userAgent: \"curl/7.64.1\", operatingSystem: \"Kali Linux\" },       // Misused CLI tool\n      { userAgent: \"Go-http-client/1.1\", operatingSystem: \"Custom Linux\" }, // Generic OS for automation\n      { userAgent: \"sqlninja\", operatingSystem: \"Kali Linux\" },             // SQL Injection tool\n      { userAgent: \"python-requests/2.25.1\", operatingSystem: \"Custom Linux\" }, // Used in automation scripts\n      { userAgent: \"Java/1.8.0\", operatingSystem: \"Solaris\" },              // Often exploited in older servers\n      { userAgent: \"masscan/1.3.2\", operatingSystem: \"FreeBSD\" }            // High-speed scanner\n  ];\n\n  function getRandomElement(arr) {\n    return arr[Math.floor(Math.random() * arr.length)];\n  }\n  \n  function generateUUID() {\n      return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n          const r = Math.random() * 16 | 0;\n          const v = c === 'x' ? r : (r & 0x3 | 0x8);\n          return v.toString(16);\n      });\n  }\n\n  // Generates a random date within the last 2 days\n  function getRandomDateWithinLastTwoDays() {\n      const now = new Date();\n      const pastDate = new Date();\n      pastDate.setDate(now.getDate() - 2); // 2 days ago\n      const randomTime = pastDate.getTime() + Math.random() * (now.getTime() - pastDate.getTime());\n      return new Date(randomTime).toISOString();\n  }\n\n  // Generates a random date within the last hour for the password spray attack\n  function getRandomDateWithinLastHour() {\n      const now = new Date();\n      const oneHourAgo = new Date();\n      oneHourAgo.setHours(now.getHours() - 1); // 1 hour ago\n      const randomTime = oneHourAgo.getTime() + Math.random() * (now.getTime() - oneHourAgo.getTime());\n      return new Date(randomTime).toISOString();\n  }\n\n  function getRandomDateWithinLast10Minutes() {\n    const now = new Date();\n    const tenMinutesAgo = new Date();\n    tenMinutesAgo.setMinutes(now.getMinutes() - 10); // 10 minutes ago\n    const randomTime = tenMinutesAgo.getTime() + Math.random() * (now.getTime() - tenMinutesAgo.getTime());\n    return new Date(randomTime).toISOString();\n  }\n\n  function getRandomDateWithinLast2Minutes() {\n    const now = new Date();\n    const tenMinutesAgo = new Date();\n    tenMinutesAgo.setMinutes(now.getMinutes() - 2); // 2 minutes ago\n    const randomTime = tenMinutesAgo.getTime() + Math.random() * (now.getTime() - tenMinutesAgo.getTime());\n    return new Date(randomTime).toISOString();\n  }\n\n  function getRandomDateWithinLastThreeMonths() {\n      const now = new Date();\n      const pastDate = new Date();\n      pastDate.setMonth(now.getMonth() - 3); // 3 months ago\n      const randomTime = pastDate.getTime() + Math.random() * (now.getTime() - pastDate.getTime());\n      return new Date(randomTime).toISOString();\n  }\n\n  // Generates a date exactly 5 minutes ago for the unfamiliar sign-in\n  function getRecentDate() {\n      const now = new Date();\n      const fiveMinutesAgo = new Date(now.getTime() - 5 * 60 * 1000); // 5 minutes ago\n      return fiveMinutesAgo.toISOString();\n  }\n\n  function get20MinutesAgoDate() {\n      const now = new Date();\n      const fiveMinutesAgo = new Date(now.getTime() - 20 * 60 * 1000); // 5 minutes ago\n      return fiveMinutesAgo.toISOString();\n  }\n\n  // Generates a date exactly 5 seconds ago\n  function get5SecondsAgoDate() {\n      const now = new Date();\n      const fiveMinutesAgo = new Date(now.getTime() - 5 * 1000);\n      return fiveMinutesAgo.toISOString();\n  }\n\n  \n  function generateSampleLogs(numLogs) {\n  \n    const logs = [];\n    const ips = [`${Math.floor(Math.random() * 255)}.${Math.floor(Math.random() * 255)}.${Math.floor(Math.random() * 255)}.${Math.floor(Math.random() * 255)}`, `${Math.floor(Math.random() * 255)}.${Math.floor(Math.random() * 255)}.${Math.floor(Math.random() * 255)}.${Math.floor(Math.random() * 255)}`, `${Math.floor(Math.random() * 255)}.${Math.floor(Math.random() * 255)}.${Math.floor(Math.random() * 255)}.${Math.floor(Math.random() * 255)}`, `${Math.floor(Math.random() * 255)}.${Math.floor(Math.random() * 255)}.${Math.floor(Math.random() * 255)}.${Math.floor(Math.random() * 255)}`];\n  \n    for (let i = 0; i < numLogs; i++) {\n        const isSuccess = Math.random() > 0.3; // 70% chance of success, 30% chance of failure\n        const userIndex = Math.floor(Math.random() * users.length);\n        const location = getRandomElement(locations);\n        const device = getRandomElement(devices);\n        const app = getRandomElement(applications);\n        const clientApp = getRandomElement(clientApps);\n        const failure = isSuccess ? success\n          : getRandomElement(failureReasons.slice(0, 2));\n\n        logs.push({\n            id: generateUUID(),\n            createdDateTime: getRandomDateWithinLast10Minutes(), // getRandomDateWithinLastTwoDays(),// getRandomDateWithinLastHour(),\n            userDisplayName: users[userIndex],\n            userPrincipalName: userEmails[userIndex],\n            userId: generateUUID(),\n            appId: generateUUID(),\n            appDisplayName: app,\n            ipAddress: getRandomElement(ips),\n            clientAppUsed: clientApp,\n            correlationId: generateUUID(),\n            status: {\n                errorCode: failure.errorCode,\n                failureReason: failure.failureReason,\n                additionalDetails: isSuccess ? null : \"Check credentials and try again.\"\n            },\n            deviceDetail: {\n                deviceId: `device-${generateUUID().slice(0, 8)}`,\n                displayName: \"User Device\",\n                operatingSystem: device.operatingSystem,\n                browser: device.browser,\n                isCompliant: Math.random() > 0.5,\n                isManaged: Math.random() > 0.5,\n                trustType: \"Azure AD Joined\"\n            },\n            location: {\n                city: location.city,\n                countryOrRegion: location.country,\n                geoCoordinates: {\n                    altitude: null,\n                    latitude: location.latitude,\n                    longitude: location.longitude\n                }\n            },\n            appliedConditionalAccessPolicies: [],\n            AzureLogType: \"SignInLog\",\n            LogSource: \"Azure\"\n        });\n    }\n\n    return logs;\n  }\n\n  function generateMfaSuccessLog(when, userIndex, app, ip, clientApp, device, location) {\n    \n    return {\n        id: generateUUID(),\n        createdDateTime: when == \"before\" ? get20MinutesAgoDate() : (when == \"within\" ? getRandomDateWithinLast10Minutes() : get5SecondsAgoDate()),\n        userDisplayName: users[userIndex],\n        userPrincipalName: userEmails[userIndex],\n        userId: generateUUID(),\n        appId: generateUUID(),\n        appDisplayName: app,\n        ipAddress: ip,\n        clientAppUsed: clientApp,\n        correlationId: generateUUID(),\n        AuthenticationRequirement: \"multiFactorAuthentication\",\n        status: {\n            errorCode: 0,\n            failureReason: \"Other.\",\n            additionalDetails: \"MFA successfully completed\"\n        },\n        deviceDetail: {\n            deviceId: `device-${generateUUID().slice(0, 8)}`,\n            displayName: \"Host-1234\",\n            operatingSystem: device.operatingSystem,\n            browser: device.browser,\n            isCompliant: true,\n            isManaged: Math.random() > 0.5,\n            trustType: \"\"\n        },\n        location: {\n            city: location.city,\n            countryOrRegion: location.country,\n            geoCoordinates: {\n                altitude: null,\n                latitude: location.latitude,\n                longitude: location.longitude\n            }\n        },\n        appliedConditionalAccessPolicies: [],\n        AzureLogType: \"SignInLog\",\n        DtUseCase: \"MFA Spamming Test\"\n    };\n  }\n  \n  function generateMfaSpammingSignInLogs(numLogs){\n    const logs = [];\n\n    const userIndex = 55;\n    const location = getRandomElement(locations);\n    const device = getRandomElement(devices);\n    const app = getRandomElement(applications);\n    const clientApp = getRandomElement(clientApps);\n    const ip = `${Math.floor(Math.random() * 255)}.${Math.floor(Math.random() * 255)}.${Math.floor(Math.random() * 255)}.${Math.floor(Math.random() * 255)}`;\n\n    // Generate a number of failed MFA attempts within a 10-minute window\n    for (let i = 0; i < numLogs; i++) {\n      logs.push({\n            id: generateUUID(),\n            createdDateTime: getRandomDateWithinLast10Minutes(),\n            userDisplayName: users[userIndex],\n            userPrincipalName: userEmails[userIndex],\n            userId: generateUUID(),\n            appId: generateUUID(),\n            appDisplayName: app,\n            ipAddress: ip,\n            clientAppUsed: clientApp,\n            correlationId: generateUUID(),\n            AuthenticationRequirement: \"multiFactorAuthentication\",\n            status: {\n                errorCode: 500121,\n                failureReason: \"Authentication failed during strong authentication request\",\n                additionalDetails: Math.random() > 0.5 ? \"MFA denied; user declined the authentication\" : \"MFA denied; user did not respond to mobile app notification\",\n            },\n            deviceDetail: {\n                deviceId: `device-${generateUUID().slice(0, 8)}`,\n                displayName: \"Host-1234\",\n                operatingSystem: device.operatingSystem,\n                browser: device.browser,\n                isCompliant: true,\n                isManaged: Math.random() > 0.5,\n                trustType: \"\"\n            },\n            location: {\n                city: location.city,\n                countryOrRegion: location.country,\n                geoCoordinates: {\n                    altitude: null,\n                    latitude: location.latitude,\n                    longitude: location.longitude\n                }\n            },\n            appliedConditionalAccessPolicies: [],\n            AzureLogType: \"SignInLog\",\n            DtUseCase: \"MFA Spamming Test\"\n        });\n    }\n\n    // Generate success log before, within and after the spamming window \n    logs.push(generateMfaSuccessLog(\"before\", userIndex, app, ip, clientApp, device, location));\n    logs.push(generateMfaSuccessLog(\"within\", userIndex, app, ip, clientApp, device, location));\n    logs.push(generateMfaSuccessLog(\"after\", userIndex, app, ip, clientApp, device, location));\n\n    // Generate log for other users\n    for (let i = 0; i < 5; i++) {\n      const device = getRandomElement(devices);\n      const location = getRandomElement(locations);\n      logs.push({\n            id: generateUUID(),\n            createdDateTime: getRandomDateWithinLast10Minutes(),\n            userDisplayName: getRandomElement(users),\n            userPrincipalName: getRandomElement(userEmails),\n            userId: generateUUID(),\n            appId: generateUUID(),\n            appDisplayName: getRandomElement(applications),\n            ipAddress: `${Math.floor(Math.random() * 255)}.${Math.floor(Math.random() * 255)}.${Math.floor(Math.random() * 255)}.${Math.floor(Math.random() * 255)}`,\n            clientAppUsed: getRandomElement(clientApps),\n            correlationId: generateUUID(),\n            AuthenticationRequirement: \"multiFactorAuthentication\",\n            status: Math.random() > 0.5 ? {\n                errorCode: 500121,\n                failureReason: \"Authentication failed during strong authentication request\",\n                additionalDetails: Math.random() > 0.5 ? \"MFA denied; user declined the authentication\" : \"MFA denied; user did not respond to mobile app notification\",\n            } : {\n                errorCode: 0,\n                failureReason: \"Other.\",\n                additionalDetails: \"MFA successfully completed\"\n            },\n            deviceDetail: {\n                deviceId: `device-${generateUUID().slice(0, 8)}`,\n                displayName: \"Host-1234\",\n                operatingSystem: device.operatingSystem,\n                browser: device.browser,\n                isCompliant: true,\n                isManaged: Math.random() > 0.5,\n                trustType: \"\"\n            },\n            location: {\n                city: location.city,\n                countryOrRegion: location.country,\n                geoCoordinates: {\n                    altitude: null,\n                    latitude: location.latitude,\n                    longitude: location.longitude\n                }\n            },\n            appliedConditionalAccessPolicies: [],\n            AzureLogType: \"SignInLog\",\n            DtUseCase: \"MFA Spamming Test\"\n        });\n    }\n    \n    return logs;\n  }\n\n  // Get all credentials in the vault\n  const credentialList = await credentialVaultClient.listCredentials();\n\n  // Initialize a variable to hold the ID\n  let credentialId = null;\n  \n  await Promise.all(credentialList.credentials.map(async (credential) => {\n    let tmp = null;\n    \n    switch(credential.name) {\n        case log_forwarding_access_token_credential_name:\n            tmp = await credentialVaultClient.getCredentialsDetails({\n                id: credential.id,\n            });\n            dynatraceAccessToken = tmp.token;\n            break;\n        \n        default:\n            break;\n    }\n  }));\n\n  if (!dynatraceAccessToken) {\n    console.log(\"No access token found!\");\n    return {};\n  }\n  \n  // Prepare headers for the request\n  const headers = {\n    \"Authorization\": `Api-Token ${dynatraceAccessToken}`,\n    \"Content-Type\": \"application/json\"\n  };\n  \n  // Send the logs to Dynatrace\n  async function sendLogs(logs) {\n    try {\n      const response = await fetch(logIngestionEndpoint, {\n        method: 'POST',\n        headers: headers,\n        body: JSON.stringify(logs)\n      });\n  \n      if (!response.ok) {\n        throw new Error(`Error: ${response.status} ${response.statusText}`);\n      }\n  \n      console.log(\"Logs successfully sent:\", response);\n    } catch (error) {\n      console.error(\"Failed to send logs:\", error);\n    }\n  }\n\n  // Generate logs\n  // const signInLogs = generateSampleLogs(40);\n  const mfaSpammingSignInLogs = generateMfaSpammingSignInLogs(15);\n\n  // DEBUG\n  // console.log(signInLogs);\n  console.log(mfaSpammingSignInLogs);\n  \n  // Execute the function to send logs\n  // sendLogs(signInLogs);\n  sendLogs(mfaSpammingSignInLogs);\n  \n  return {};\n}\n"
      },
      "position": {
        "x": 0,
        "y": 2
      },
      "predecessors": [
        "get_environment_url"
      ],
      "conditions": {
        "states": {
          "get_environment_url": "OK"
        }
      }
    },
    "get_environment_url": {
      "name": "get_environment_url",
      "action": "dynatrace.automations:run-javascript",
      "description": "Build a custom task running js Code",
      "input": {
        "script": "import { execution } from '@dynatrace-sdk/automation-utils';\n\nexport default async function ({ execution_id }) {\n\n  const environmentURL = globalThis.environmentUrl.replace(\".apps\", \"\");\n  \n  return environmentURL;\n}"
      },
      "position": {
        "x": 0,
        "y": 1
      },
      "predecessors": []
    }
  },
  "description": "",
  "ownerType": "USER",
  "isPrivate": false,
  "trigger": {},
  "schemaVersion": 3,
  "type": "STANDARD"
}